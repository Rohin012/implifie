<template>
  <div class="grid grid-cols-2 gap-4">
    <div>
    
      <Textinput label="First Name" classInput="w-full" v-model="contacts.first_name" />
      <Textinput label="Last Name" classInput="w-full" v-model="contacts.last_name" />
      <Textinput label="Email" classInput="w-full" v-model="contacts.email" />
      <Textinput label="Phone" classInput="w-full" v-model="contacts.phone" />
      <Button
        v-if="!isNew"
        text="Save Changes"
        btnClass="btn-dark w-1/3 justify-self-end"
        class="col-span-2"
        :class="`${!isProfileUpdated() ? ' opacity-40 cursor-not-allowed' : ''}`"
        :disabled="!isProfileUpdated()"
        @click="updateContact"
      />
    </div>
    <Button
      v-if="isNew"
      text="Create New Business"
      btnClass="btn-dark w-1/3 justify-self-end"
      class="col-span-2"
      @click="createContact"
    />
  </div>
</template>

<script>
import Textinput from "@/components/Textinput";
import Textarea from "@/components/Textarea";
import VueSelect from "@/components/Select/VueSelect";
import Button from "@/components/Button";
import { useContactStore } from "@/store/contact";

export default {
  components: {
    Textinput,
    Textarea,
    VueSelect,
    Button,
  },
  data() {
    return {
      contacts: {
        id:"",
        first_name:"",
        last_name:"",
        phone:"",
        email:""
        
      },
      isNew: false,
    };
  },
  computed: {
    isProfileUpdated() {
      return () => {
        const contactStore = useContactStore();
        const contactData = contactStore.contacts;
        const contact = this.contacts;

        return (
          contact.id !== contactData.id ||
          contact.first_name !== contactData.first_name ||
          contact.last_name !== contactData.last_name ||
          contact.email !== contactData.email ||
          contact.phone !== contactData.phone
        );
      };
    },
  },
  methods: {
    async updateContact() {
      console.log(this.updateContact);
      const contactStore = useContactStore();
      await contactStore.updateContact(this.contacts);
      this.showModal=false;
    },

    async createContact() {
      const contactStore = useContactStore();
     console.log(contactStore)
      await contactStore.createContact(this.contacts);
    },
  },
  created() {
  const contactStore = useContactStore();

  if (!this.isNew) {
    const contactId = this.$route.params.id; // Assuming you are using Vue Router and the ID is part of the route params
    const contactData = contactStore.fetchContactId(contactId) // Adjust this based on your store implementation
      console.log("contactId",contactId)
      console.log("contactData",contactData)
    if (contactData) {
      this.contacts = {
        id:contactData.id,
        first_name: contactData.first_name,
        last_name: contactData.last_name,
        phone: contactData.phone,
        email: contactData.email,
      };

      Object.entries(this.contacts).forEach(([field, value]) => {
        console.log(`${field}: ${value}`);
      });
      console.log('updatecontact',this.contacts);
    } else {
      console.error(`Contact with ID ${contactId} not found.`);
    }
  }
},

}
</script>
