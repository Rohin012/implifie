<template>
  <div class="grid grid-cols-2 gap-4">
    
    <div>
      <div class="mb-4">
      <label for="first_name" class="block text-sm font-medium text-gray-700">First Name</label>
      <input type="text" id="first_name" name="first_name" v-model="contacts.first_name" class="mt-1 p-2 w-full border rounded-md">
    </div>

    <div class="mb-4">
      <label for="last_name" class="block text-sm font-medium text-gray-700">Last Name</label>
      <input type="text" id="last_name" name="last_name" v-model="contacts.last_name" class="mt-1 p-2 w-full border rounded-md">
    </div>

    <div class="mb-4">
      <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
      <input type="email" id="email" name="email" v-model="contacts.email" class="mt-1 p-2 w-full border rounded-md">
    </div>

    <div>
      <label for="phone" class="block text-sm font-medium text-gray-700">Phone</label>
      <input type="tel" id="phone" name="phone" v-model="contacts.phone" class="mt-1 p-2 w-full border rounded-md">
    </div>
      <Button
        v-if="!isNew"
        text="Save Changes"
        btnClass="btn-dark w-1/3 justify-self-end"
        class="col-span-2"
        :class="{ 'opacity-40 cursor-not-allowed': !isContactUpdated}"
        :disabled="!isContactUpdated"
        @click="updateContact"
      />
   
    </div>
    
    <Button
      v-if="isNew"
      text="Create New Business"
      btnClass="btn-dark w-1/3 justify-self-end"
      class="col-span-2"
      @click="createContact"
    />
  </div>
  
</template>


<script>
import Button from "@/components/Button";
import { useContactStore } from "@/store/contact";

export default {
  components: {
    Button,
  },
  props: {
    contact: {
      type: Object,
      default: () => ({}),
    },
  },
  
  
  data() {
    return {
      contacts:{
          first_name:"",
          last_name:"",
          phone:"",
          email:"",
          id:""
      },
      isNew: false,
      
    };
  },

  computed: {
    isContactUpdated() {
      const contactStore = useContactStore();
      const contactData = contactStore.contacts;
      const contact = this.contacts;

      return contactData.some(dataContact =>
        Object.keys(contact).every(key =>
          contact[key] === dataContact[key]
        )
      );
    },
    
  },

  watch: {
    contacts: {
      handler: function () {
        this.updateProfileStatus();
      },
      deep: true,
    },
  },

  methods: {
    async updateContact() {
      try {
        const contactStore = useContactStore();
        console.log(this.contact)
        if (this.contacts.id) {
          await contactStore.updateContact(this.contacts);
          console.log('Contact updated successfully!');
        } else {
          console.error('Contact ID is undefined. Unable to update.');
        }
      } catch (error) {
        console.error('Error updating contact:', error);
      }
    },

    

    async fetchAndSetContactDetails(contactId) {
      const contactStore = useContactStore();

      if (!this.isNew) {
        try {
          const contactData = await contactStore.fetchContactId(contactId);
          
          if (contactData) {
            if (this.$set) {
              Object.keys(contactData).forEach((key) => {
                this.$set(this.contacts, key, contactData[key]);
              });
            } else {
              this.contacts = Object.assign({}, contactData);
            }

            console.log("this.contacts", this.contacts);
          } else {
            console.error(`Contact with ID ${contactId} not found.`);
          }
        } catch (error) {
          console.error(`Error fetching contact with ID ${contactId}:`, error);
        }
      }
      console.log(this.contacts)
    

    },

    updateProfileStatus() {
      const contactStore = useContactStore();
      const contactData = contactStore.contacts;
      const contact = this.contacts;

      this.isContactUpdated = contactData.some(dataContact =>
        Object.keys(contact).every(key => contact[key] === dataContact[key])
      );
    },
  },

  created() {

    console.log('Received contact in contactProfile:', this.contact);
      const contactStore = useContactStore();
      const contactId = contactStore.fetchContactId();
     
      if (contactId) {
        this.fetchAndSetContactDetails(contactId);
      } else {
        console.log('Contact ID is undefined.');
      }
      
     
      console.log(this.contacts.id)
    },
 
};
</script>
