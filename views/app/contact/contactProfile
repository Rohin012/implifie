<template>
  <div class="grid grid-cols-2 gap-4">
    <div>
      <div class="mb-4">
        <label for="first_name" class="block text-sm font-medium text-gray-700">First Name</label>
        <input type="text" id="first_name" name="first_name" v-model="contacts.first_name" class="mt-1 p-2 w-full border rounded-md">
      </div>

      <div class="mb-4">
        <label for="last_name" class="block text-sm font-medium text-gray-700">Last Name</label>
        <input type="text" id="last_name" name="last_name" v-model="contacts.last_name" class="mt-1 p-2 w-full border rounded-md">
      </div>

      <div class="mb-4">
        <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
        <input type="email" id="email" name="email" v-model="contacts.email" class="mt-1 p-2 w-full border rounded-md">
      </div>

      <div>
        <label for="phone" class="block text-sm font-medium text-gray-700">Phone</label>
        <input type="tel" id="phone" name="phone" v-model="contacts.phone" class="mt-1 p-2 w-full border rounded-md">
      </div>

      <Button
        v-if="!isNew"
        text="Save Changes"
        btnClass="btn-dark w-1/3 justify-self-end"
        class="col-span-2"
        :class="`${!isProfileUpdated() ? ' opacity-40 cursor-not-allowed' : ''}`"
        :disabled="!isProfileUpdated()"
        @click="updateContact"
      />
    </div>

    <Button
      v-if="isNew"
      text="Create New Business"
      btnClass="btn-dark w-1/3 justify-self-end"
      class="col-span-2"
      @click="createContact"
    />
  </div>
</template>

<script>
import Vue from 'vue';
import Button from "@/components/Button";
import { useContactStore } from "@/store/contact";

export default {
  components: {
    Button,
  },
  
  data() {
    return {
      contacts: {
        first_name: "",
        last_name: "",
        phone: "",
        email: "",
        id: "",
      },
      isNew: false,
    };
  },

  computed: {
    isProfileUpdated() {
      const contactStore = useContactStore();
      const contactData = contactStore.contacts;
      const contact = this.contacts;

      return (
        contact.id === contactData.id &&
        contact.first_name === contactData.first_name &&
        contact.last_name === contactData.last_name &&
        contact.email === contactData.email &&
        contact.phone === contactData.phone
      );
    },
  },

  methods: {
    async updateContact() {
      try {
        const contactStore = useContactStore();

        if (this.contacts.id) {
          await contactStore.updateContact(this.contacts);
          console.log('Contact updated successfully!');
        } else {
          console.error('Contact ID is undefined. Unable to update.');
        }
      } catch (error) {
        console.error('Error updating contact:', error);
      }
    },

    async fetchAndSetContactDetails(contactId) {
      const contactStore = useContactStore();

      console.log("contactId", contactId);

      if (!this.isNew && contactId) {
        try {
          const contactData = await contactStore.fetchContactId(contactId);
          console.log("contactData", contactData);

          if (contactData) {
            // Ensure reactivity by using Vue.set
            Vue.set(this.contacts, 'id', contactData.id);
            Vue.set(this.contacts, 'first_name', contactData.first_name);
            Vue.set(this.contacts, 'last_name', contactData.last_name);
            Vue.set(this.contacts, 'phone', contactData.phone);
            Vue.set(this.contacts, 'email', contactData.email);
          } else {
            console.error(`Contact with ID ${contactId} not found.`);
          }
        } catch (error) {
          console.error(`Error fetching contact with ID ${contactId}:`, error);
        }
      }
    },
  },

  // Inside your component
  created() {
    const contactStore = useContactStore();
    const contactId = contactStore.getCurrentContactId();
    this.fetchAndSetContactDetails(contactId);
  },
};
</script>
